# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false


    twig.extension.intl:
        class: Twig_Extensions_Extension_Intl
        tags:
            - { name: twig.extension }

    twig.extension.date:
            class: Twig_Extensions_Extension_Date
            tags:
                - { name: twig.extension }


    # Fixtures services
    #CVBundle\DataFixtures\ORM\LoadCVBundleEntityIntro:
        #tags: [doctrine.fixture.orm]
    #CVBundle\DataFixtures\ORM\LoadCVBundleEntityCompetence:
        #tags: [doctrine.fixture.orm]
    #CVBundle\DataFixtures\ORM\LoadCVBundleEntityExperience:
        #tags: [doctrine.fixture.orm]
    #CVBundle\DataFixtures\ORM\LoadCVBundleEntityFormation:
        #tags: [doctrine.fixture.orm]
    #CVBundle\DataFixtures\ORM\LoadCVBundleEntityRealisation:
        #tags: [doctrine.fixture.orm]

    #BlogBundle\DataFixtures\ORM\LoadBlogBundleEntityComment:
        #tags: [doctrine.fixture.orm]
    #BlogBundle\DataFixtures\ORM\LoadBlogBundleEntityPost:
        #tags: [doctrine.fixture.orm]
    #BlogBundle\DataFixtures\ORM\LoadBlogBundleEntityUser:
        #tags: [doctrine.fixture.orm]




    # makes classes in src/CVBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    CVBundle\:
        resource: '../../src/CVBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/CVBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    CVBundle\Controller\:
        resource: '../../src/CVBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    # add more services, or override services that need manual wiring
    # CVBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'

    cv.admin.competence:
        class: CVBundle\Admin\CompetenceAdmin
        arguments: [~, CVBundle\Entity\Competence, ~]
        tags:
            - name: sonata.admin
              manager_type: orm
              label: Competence
              group: "CV"
        public: true



    cv.admin.experience:
        class: CVBundle\Admin\ExperienceAdmin
        arguments: [~, CVBundle\Entity\Experience, ~]
        tags:
            - name: sonata.admin
              manager_type: orm
              label: Experience
              group: "CV"

        public: true


    cv.admin.formation:
        class: CVBundle\Admin\FormationAdmin
        arguments: [~, CVBundle\Entity\Formation, ~]
        tags:
            - name: sonata.admin
              manager_type: orm
              label: Formation
              group: "CV"
        public: true

    cv.admin.intro:
        class: CVBundle\Admin\IntroAdmin
        arguments: [~, CVBundle\Entity\Intro, ~]
        tags:
            - name: sonata.admin
              manager_type: orm
              label: Intro
              group: "CV"
        public: true

    cv.admin.realisation:
        class: CVBundle\Admin\RealisationAdmin
        arguments: [~, CVBundle\Entity\Realisation, ~]
        tags:
            - name: sonata.admin
              manager_type: orm
              label: Realisation
              group: "CV"
        public: true



    # makes classes in src/CVBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    BlogBundle\:
        resource: '../../src/BlogBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/BlogBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    BlogBundle\Controller\:
        resource: '../../src/BlogBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    # add more services, or override services that need manual wiring
    # BlogBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'


    blog.admin.user:
        class: BlogBundle\Admin\UserAdmin
        arguments: [~, BlogBundle\Entity\User, ~]
        tags:
            - name: sonata.admin
              manager_type: orm
              label: User
              group: "Blog"
        public: true


    blog.admin.post:
        class: BlogBundle\Admin\PostAdmin
        arguments: [~, BlogBundle\Entity\Post, ~]
        tags:
            - name: sonata.admin
              manager_type: orm
              label: Post
              group: "Blog"

        public: true


    blog.admin.comment:
        class: BlogBundle\Admin\CommentAdmin
        arguments: [~, BlogBundle\Entity\Comment, ~]
        tags:
            - name: sonata.admin
              manager_type: orm
              label: Comment
              group: "Blog"
        public: true
